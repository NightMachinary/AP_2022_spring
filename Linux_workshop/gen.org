#+TITLE: Linux_workshop/gen

* *links*
** [[https://github.com/ketancmaheshwari/lisa19/raw/master/LPT_LISA.pdf][a concise guide to important Linux concepts]]

** Perl does =sed= and =awk= both, better
*** https://catonmat.net/ftp/perl1line.txt

** "modern" Unix commands
*** =grep= -> [[https://github.com/BurntSushi/ripgrep][GitHub - BurntSushi/ripgrep: ripgrep recursively searches directories for a regex pattern while respecting your gitignore]]
#+begin_example zsh
sudo apt-get install -y ripgrep
#+end_example

*** =find= -> [[https://github.com/sharkdp/fd][GitHub - sharkdp/fd: A simple, fast and user-friendly alternative to 'find']]
#+begin_src bsh.dash :results verbatim :exports both :wrap results
sudo apt-get install -y fd-find
#+end_src

*** =man= && =info= && [[https://github.com/tldr-pages/tldr][GitHub - tldr-pages/tldr: ðŸ“š Collaborative cheatsheets for console commands]]
#+begin_example zsh
sudo apt install -y tldr #: the Haskell tldr client
#+end_example

**** [[https://github.com/dbrgn/tealdeer][GitHub - dbrgn/tealdeer: A very fast implementation of tldr in Rust.]]
***** [[https://dbrgn.github.io/tealdeer/installing.html][Installing - Tealdeer User Manual]]

*** =make= -> [[https://github.com/casey/just/][GitHub - casey/just: ðŸ¤– Just a command runner]]

*** =screen= -> [[https://github.com/tmux/tmux][GitHub - tmux/tmux: tmux source code]]

**** [[https://tmate.io/][tmate â€¢ Instant terminal sharing]]

*** [[https://github.com/junegunn/fzf][GitHub - junegunn/fzf: A command-line fuzzy finder]]

**** [[https://github.com/Aloxaf/fzf-tab][GitHub - Aloxaf/fzf-tab: Replace zsh's default completion selection menu with fzf!]]

** starter packs
*** =zsh=
**** [[https://github.com/ohmyzsh/ohmyzsh][GitHub - ohmyzsh/ohmyzsh: ðŸ™ƒ A delightful community-driven (with 2,000+ contributors) framework for managing your zsh configuration. Includes 300+ optional plugins (rails, git, macOS, hub, docker, h...]]

*** =emacs=
**** [[https://github.com/hlissner/doom-emacs][GitHub - hlissner/doom-emacs: An Emacs framework for the stubborn martian hacker]]

** package managers
*** [[https://docs.brew.sh/Homebrew-on-Linux][Homebrew on Linux â€” Homebrew Documentation]]

*** [[https://nixos.org/nix/manual/][nix]]

* =zsh=
** install
#+begin_example zsh
sudo apt install -y zsh
#+end_example

** [[nightNotes:private/symlinks/dirs/learnxinyminutes-docs/bash.org][learnxinyminutes-docs/bash]]

** arguments, quoting
#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger() { #: ignore the implementation for now
  for arg in "$@"
  do
    print -r -- "arg: \$${arg}\$"
  done
}
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger hello world
#+end_src

#+RESULTS:
#+begin_results
arg: $hello$
arg: $world$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger 'hello world'
#+end_src

#+RESULTS:
#+begin_results
arg: $hello world$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "hello world"
#+end_src

#+RESULTS:
#+begin_results
arg: $hello world$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger hello\ world
#+end_src

#+RESULTS:
#+begin_results
arg: $hello world$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger 'hello' 'world'
#+end_src

#+RESULTS:
#+begin_results
arg: $hello$
arg: $world$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger 'hello
world'
#+end_src

#+RESULTS:
#+begin_results
arg: $hello
world$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger 'hello "world"'
#+end_src

#+RESULTS:
#+begin_results
arg: $hello "world"$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "hello 'world'"
#+end_src

#+RESULTS:
#+begin_results
arg: $hello 'world'$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger 'hello \world\'
#+end_src

#+RESULTS:
#+begin_results
arg: $hello \world\$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "hello \world\"
#+end_src

#+RESULTS:
#+begin_results
/var/folders/5v/g3zxt_7d64g3sd_56bzpqbvh0000gn/T/tmp.ig1u2LbbML.zsh:1: unmatched "
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "hello \\world\\"
#+end_src

#+RESULTS:
#+begin_results
arg: $hello \world\$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "hello \"world\""
#+end_src

#+RESULTS:
#+begin_results
arg: $hello "world"$
#+end_results


#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ''
#+end_src

#+RESULTS:
#+begin_results
arg: $$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger '' '' ''
#+end_src

#+RESULTS:
#+begin_results
arg: $$
arg: $$
arg: $$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger 'hello'" "'world'
# arger 'hello' + " " + 'world'
#+end_src

#+RESULTS:
#+begin_results
arg: $hello world$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ''\ ''\ ''
#: ('' + ' ' + '' + ' ' + '')
#+end_src

#+RESULTS:
#+begin_results
arg: $  $
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger \
# There is a space after the backslash. (courtesy of brish)
#+end_src

#+RESULTS:
#+begin_results
arg: $ $
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger \   \
#+end_src

#+RESULTS:
#+begin_results
arg: $ $
arg: $$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger '1\n2\n3'
#+end_src

#+RESULTS:
#+begin_results
arg: $1\n2\n3$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "1\n2\n3"
#+end_src

#+RESULTS:
#+begin_results
arg: $1\n2\n3$
#+end_results


#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger $'1\n2\n3'
#+end_src

#+RESULTS:
#+begin_results
arg: $1
2
3$
#+end_results

** the basic structure of commands
#+begin_example zsh
some_command -r --long-option --some-parameter=some_value --other-parameter some_other_value -- argument_1 argument_2
#: -r is short for some longer option such as --recursive
#+end_example

*** =command some_command ...= ensures that we are running =some_commnd=, and not a shell function/alias/etc.

*** Short options can often be combined:
=-a -w -d= -> =-awd=

*** Long options are better for readability.

** variables
#+begin_src bsh.dash :results verbatim :exports both :wrap results
d=~/tmp/linux_workshop
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger $d
#+end_src

#+RESULTS:
#+begin_results
arg: $/Users/evar/tmp/linux_workshop$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
d2='hello world'
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger $d2
#+end_src

#+RESULTS:
#+begin_results
arg: $hello world$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ${=d2}
#+end_src

#+RESULTS:
#+begin_results
arg: $hello$
arg: $world$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
d3=''
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger $d3
#> arger
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "$d3"
#+end_src

#+RESULTS:
#+begin_results
arg: $$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "$d"
#+end_src

#+RESULTS:
#+begin_results
arg: /Users/evar/tmp/linux_workshop
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
typeset -p d
#+end_src

#+RESULTS:
#+begin_results
typeset -g d=/Users/evar/tmp/linux_workshop
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
d4='$n|a&*
        ke'
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
typeset -p d4
#+end_src

#+RESULTS:
#+begin_results
typeset -g d4=$'$n|a&*\n        ke'
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
local d5=hi
typeset -p d5
#+end_src

#+RESULTS:
#+begin_results
typeset d5=hi
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
integer d6=89
typeset -p d6
#+end_src

#+RESULTS:
#+begin_results
typeset -i d6=89
#+end_results


#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "Hello, ${d}!"
#+end_src

#+RESULTS:
#+begin_results
arg: Hello, /Users/evar/tmp/linux_workshop!
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger 'Hello, ${d}!'
#+end_src

#+RESULTS:
#+begin_results
arg: Hello, ${d}!
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger Hello, ${d}!
# '!' might behave differently in a shell with history expansion active.
#+end_src

#+RESULTS:
#+begin_results
arg: Hello,
arg: /Users/evar/tmp/linux_workshop!
#+end_results

** lists
#+begin_src bsh.dash :results verbatim :exports both :wrap results
foo=( one 't w o' 3 '' 4 )
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "${foo}"
#+end_src

#+RESULTS:
#+begin_results
arg: $one t w o 3  4$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "${foo[@]}"
#+end_src

#+RESULTS:
#+begin_results
arg: $one$
arg: $t w o$
arg: $3$
arg: $$
arg: $4$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger start"${foo[@]}"end
#+end_src

#+RESULTS:
#+begin_results
arg: $startone$
arg: $t w o$
arg: $3$
arg: $$
arg: $4end$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ${foo[@]}
#+end_src

#+RESULTS:
#+begin_results
arg: one
arg: t w o
arg: 3
arg: 4
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "${(@)foo}"
#+end_src

#+RESULTS:
#+begin_results
arg: one
arg: t w o
arg: 3
arg:
arg: 4
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "${foo[1,3]}"
#+end_src

#+RESULTS:
#+begin_results
arg: one t w o 3
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "${(@)foo[1,3]}"
#+end_src

#+RESULTS:
#+begin_results
arg: one
arg: t w o
arg: 3
#+end_results

** hashmaps
#+begin_src bsh.dash :results verbatim :exports both :wrap results
typeset -A h1
h1[hi]='wood'
h1[one]=89

echo "${h1[hi]}"
# typeset -p h1
#+end_src

#+RESULTS:
#+begin_results
wood
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
echo $functions[arger]
#+end_src

#+RESULTS:
#+begin_results
	for arg in "$@"
	do
		print -r -- "arg: \$${arg}\$"
	done
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
echo $commands[grep]
#+end_src

#+RESULTS:
#+begin_results
/usr/bin/grep
#+end_results

** command substitution
#+begin_src bsh.dash :results verbatim :exports both :wrap results
echo $PWD
#+end_src

#+RESULTS:
#+begin_results
/Users/evar/Base/_Code/uni/AP_2022_spring/Linux_workshop
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
realpath ${PWD}/..
#+end_src

#+RESULTS:
#+begin_results
/Users/evar/Base/_Code/uni/AP_2022_spring
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
ls ..
#+end_src

#+RESULTS:
#+begin_results
.
..
.git
Linux_workshop
Untitled.ipynb
functional_workshop
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
dirs="$(command ls ..)"

typeset -p dirs
#+end_src

#+RESULTS:
#+begin_results
typeset -g dirs=$'Linux_workshop\nUntitled.ipynb\nfunctional_workshop'
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "${dirs[@]}"
#+end_src

#+RESULTS:
#+begin_results
arg: $Linux_workshop
Untitled.ipynb
functional_workshop$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
dirs=("${(@ps.\n.)dirs}")
typeset -p dirs
#+end_src

#+RESULTS:
#+begin_results
typeset -g -a dirs=( Linux_workshop Untitled.ipynb functional_workshop )
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
a="1,2,3,4"

arger "${(@s/,/)a}"
#+end_src

#+RESULTS:
#+begin_results
arg: $1$
arg: $2$
arg: $3$
arg: $4$
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "${dirs[@]}"
#+end_src

#+RESULTS:
#+begin_results
arg: $Linux_workshop$
arg: $Untitled.ipynb$
arg: $functional_workshop$
#+end_results

** foreach loops
#+begin_src bsh.dash :results verbatim :exports both :wrap results
for i in "${(@)foo}"
do
  echo "i: ${i}"
done
#+end_src

#+RESULTS:
#+begin_results
i: one
i: t w o
i: 3
i:
i: 4
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
for i in "${(@)dirs}"
do
  command du -h ../"${i}"
done
#+end_src

#+RESULTS:
#+begin_results
 16K	../Linux_workshop
4.0K	../Untitled.ipynb
 40K	../functional_workshop/.ipynb_checkpoints
 96K	../functional_workshop
#+end_results

** globbing
#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger *
#+end_src

#+RESULTS:
#+begin_results
arg: gen.org
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ../*
#+end_src

#+RESULTS:
#+begin_results
arg: ../Linux_workshop
arg: ../Untitled.ipynb
arg: ../functional_workshop
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ../*.ipynb
#+end_src

#+RESULTS:
#+begin_results
arg: ../Untitled.ipynb
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ../*func
#+end_src

#+RESULTS:
#+begin_results
/var/folders/5v/g3zxt_7d64g3sd_56bzpqbvh0000gn/T/tmp.NMkSxHxJ9A.zsh:1: no matches found: ../*func
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ../*func*
#+end_src

#+RESULTS:
#+begin_results
arg: ../functional_workshop
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ../*.org
#+end_src

#+RESULTS:
#+begin_results
/var/folders/5v/g3zxt_7d64g3sd_56bzpqbvh0000gn/T/tmp.Q7NacJPbez.zsh:1: no matches found: ../*.org
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ../**/*.org
#+end_src

#+RESULTS:
#+begin_results
arg: ../Linux_workshop/gen.org
arg: ../functional_workshop/Racket.org
arg: ../functional_workshop/Scala.org
arg: ../functional_workshop/gen.org
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ../*workshop
#+end_src

#+RESULTS:
#+begin_results
arg: ../Linux_workshop
arg: ../functional_workshop
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger ../*workshop~*func*
#+end_src

#+RESULTS:
#+begin_results
arg: ../Linux_workshop
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
words=(${(@ps.\n.)"$(cat /usr/share/dict/words)"})
#+end_src

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "${(@M)words:#zoo*gy}"
#+end_src

#+RESULTS:
#+begin_results
arg: zoogeology
arg: zoology
arg: zoonosology
arg: zoopaleontology
arg: zoopathology
arg: zoophysiology
arg: zoophytology
arg: zoopsychology
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
arger "${(@M)words:#z??}"
#+end_src

#+RESULTS:
#+begin_results
arg: zac
arg: zad
arg: zag
arg: zak
arg: zar
arg: zat
arg: zax
arg: zed
arg: zee
arg: zel
arg: zer
arg: zig
arg: zip
arg: zoa
arg: zoo
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
#: without 'M', the glob acts as a filter
arger "${(@)words:#??*}"
#+end_src

#+RESULTS:
#+begin_results
arg: A
arg: a
arg: B
arg: b
arg: C
arg: c
arg: D
arg: d
arg: E
arg: e
arg: F
arg: f
arg: G
arg: g
arg: H
arg: h
arg: I
arg: i
arg: J
arg: j
arg: K
arg: k
arg: L
arg: l
arg: M
arg: m
arg: N
arg: n
arg: O
arg: o
arg: P
arg: p
arg: Q
arg: q
arg: R
arg: r
arg: S
arg: s
arg: T
arg: t
arg: U
arg: u
arg: V
arg: v
arg: W
arg: w
arg: X
arg: x
arg: Y
arg: y
arg: Z
arg: z
#+end_results

** conditionals
#+begin_src bsh.dash :results verbatim :exports both :wrap results
echo hi
echo "return code: $?"
#+end_src

#+RESULTS:
#+begin_results
hi
return code: 0
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
touch /hi
echo "return code: $?"
#+end_src

#+RESULTS:
#+begin_results
touch: /hi: Read-only file system
return code: 1
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
i=89
(( i > 100 ))
echo "return code: $?"
#+end_src

#+RESULTS:
#+begin_results
return code: 1
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
i=89
(( i < 100 ))
echo "return code: $?"
#+end_src

#+RESULTS:
#+begin_results
return code: 0
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
i=89
echo $(( i > 100 ))
# echo 0
#+end_src

#+RESULTS:
#+begin_results
0
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
echo $(( sin(i) ))
#+end_src

#+RESULTS:
#+begin_results
0.86006940581245328
#+end_results


#+begin_src bsh.dash :results verbatim :exports both :wrap results
i=0
if (( i < 10 )) # => if 0
then
  echo "i < 10"
fi
#+end_src

#+RESULTS:
#+begin_results
i < 10
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
if (( i > 10 )) # => if 1
then
  echo "i > 10"
else
  echo 'in the else clause'
fi
#+end_src

#+RESULTS:
#+begin_results
in the else clause
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
tldr '[['
#+end_src

#+RESULTS:
#+begin_results

  Check file types and compare values.
  Returns 0 if the condition evaluates to true, 1 if it evaluates to false.
  More information: <https://www.gnu.org/software/bash/manual/bash.html#index-_005b_005b>.

  Test if a given variable is equal/not equal to the specified string:

      [[ $variable ==|!= "string" ]]

  Test if a given string conforms the specified glob/regex:

      [[ $variable ==|=~ pattern ]]

  Test if a given variable is [eq]ual/[n]ot [e]qual/[g]reater [t]han/[l]ess [t]han/[g]reater than or [e]qual/[l]ess than or [e]qual to the specified number:

      [[ $variable -eq|ne|gt|lt|ge|le integer ]]

  Test if the specified variable has a [n]on-empty value:

      [[ -n $variable ]]

  Test if the specified variable has an empty value:

      [[ -z $variable ]]

  Test if the specified [f]ile exists:

      [[ -f path/to/file ]]

  Test if the specified [d]irectory exists:

      [[ -d path/to/directory ]]

  Test if the specified file or directory [e]xists:

      [[ -e path/to/file_or_directory ]]

#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
a='oranges'

if [[ "$a" == oranges ]]
then
  echo y
else
  echo n
fi
#+end_src

#+RESULTS:
#+begin_results
y
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
a='oranges'

setopt rematchpcre

[[ "$a" =~ '^ora.*s' ]]
echo "return code: $?"
#+end_src

#+RESULTS:
#+begin_results
return code: 0
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
a='oranges'

if [[ "$a" == apples ]]
then
  echo y
else
  echo n
fi
#+end_src

#+RESULTS:
#+begin_results
n
#+end_results

** while loops
#+begin_src bsh.dash :results verbatim :exports both :wrap results
i=0
while (( i < 10 ))
do
  i=$(( i + 1 ))
  typeset -p i
done
#+end_src

#+RESULTS:
#+begin_results
typeset -g i=1
typeset -g i=2
typeset -g i=3
typeset -g i=4
typeset -g i=5
typeset -g i=6
typeset -g i=7
typeset -g i=8
typeset -g i=9
typeset -g i=10
#+end_results

** functions
#+begin_src bsh.dash :results verbatim :exports both :wrap results
bar() {
  local input_1="$1" input_2="$2" input_rest=("${@[3,-1]}")

  typeset -p input_1 input_2 input_rest
}

bar one two three four five six
#+end_src

#+RESULTS:
#+begin_results
typeset input_1=one
typeset input_2=two
typeset -a input_rest=( three four five six )
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
bar one\ two 'three four' "" five six
#+end_src

#+RESULTS:
#+begin_results
typeset input_1='one two'
typeset input_2='three four'
typeset -a input_rest=( '' five six )
#+end_results

** aliases
#+begin_src bsh.dash :results verbatim :exports both :wrap results
alias rm='rm -i'
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
unalias rm
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
rm() {
    command rm -i "$@"
}
#+end_src

** redirection
*** stdin, stdout, stderr
#+begin_example zsh
&1
&2

#+end_example

#+begin_src bsh.dash :results verbatim :exports both :wrap results
echo_error() {
  local input_all=("$@")

  echo "${input_all[@]}" 1>&2
}
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$(mktemp -d)" #: goes to a temporary directory

{
  echo 'this is in stdout'

  echo_error 'this is in stderr'
} 1> stdout.txt 2> stderr.txt

bat --decorations=always --style=header -- stdout.txt stderr.txt
#+end_src

#+RESULTS:
#+begin_results
File: stdout.txt
this is in stdout

File: stderr.txt
this is in stderr
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
echo $'1\n2\n3'
#+end_src

#+RESULTS:
#+begin_results
1
2
3
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
echo $'1\n2\n3' | cat
#+end_src

#+RESULTS:
#+begin_results
1
2
3
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
echo $'1\n2\n3' | cat -n
#+end_src

#+RESULTS:
#+begin_results
     1	1
     2	2
     3	3
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
echo $'one\ntwo\nthree' | cat -n
#+end_src

#+RESULTS:
#+begin_results
     1	one
     2	two
     3	three
#+end_results

*** redirection to files
#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$(mktemp -d)" #: goes to a temporary directory

some_file="f-00.txt"

for i in {1..10} # => 1 2 3 4 5 6 7 8 9 10
do
  echo "$i" 1> "$some_file"
done

cat "$some_file"
#+end_src

#+RESULTS:
#+begin_results
10
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$(mktemp -d)" #: goes to a temporary directory

some_file="f-00.txt"

for i in {1..10}
do
  echo "$i" 1>> "$some_file"
done

cat "$some_file"
#+end_src

#+RESULTS:
#+begin_results
1
2
3
4
5
6
7
8
9
10
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cat /usr/share/dict/words | head -n 10
#+end_src

#+RESULTS:
#+begin_results
A
a
aa
aal
aalii
aam
Aani
aardvark
aardwolf
Aaron
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
head -n 10 < /usr/share/dict/words
#+end_src

#+RESULTS:
#+begin_results
A
a
aa
aal
aalii
aam
Aani
aardvark
aardwolf
Aaron
#+end_results

*** advanced piping examples
#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$(mktemp -d)" #: goes to a temporary directory

names=( 'steins gate' 'hunterxhunter' 'another' 'death note' "king's ranking" )

{
  for name in ${(@)names} ; do
    #: `reval-memoi kitsu.js` is a blackbox in this tutorial
    reval-memoi kitsu.js "$name" | jq -re '.data[0] | (.canonicalTitle + ": " + .averageRating)'
  done
} > pipe_2 \
| perl -e 'print(sort({ (split(":", $a))[-1] <=> (split(":", $b))[-1] } <>))' > pipe_3 \
| tac > pipe_4 \
| cat -n > pipe_5

bat --decorations=always --style=header -- pipe_*
#+end_src

#+RESULTS:
#+begin_results
File: pipe_2
Steins;Gate: 82.17
Hunter x Hunter Movie 2: The Last Mission: 71.52
Another: 75.51
Death Note: 83.59
Ousama Ranking: 82.11

File: pipe_3
Hunter x Hunter Movie 2: The Last Mission: 71.52
Another: 75.51
Ousama Ranking: 82.11
Steins;Gate: 82.17
Death Note: 83.59

File: pipe_4
Death Note: 83.59
Steins;Gate: 82.17
Ousama Ranking: 82.11
Another: 75.51
Hunter x Hunter Movie 2: The Last Mission: 71.52

File: pipe_5
     1  Death Note: 83.59
     2  Steins;Gate: 82.17
     3  Ousama Ranking: 82.11
     4  Another: 75.51
     5  Hunter x Hunter Movie 2: The Last Mission: 71.52
#+end_results


* navigation
#+begin_src bsh.dash :results verbatim :exports both :wrap results
mkdir -p "$d"
cd "$d"
pwd
#+end_src

#+RESULTS:
#+begin_results
/Users/evar/tmp/linux_workshop
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d"
##
cd ..
pwd
#+end_src

#+RESULTS:
#+begin_results
/Users/evar/tmp
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd
pwd
#+end_src

#+RESULTS:
#+begin_results
/Users/evar
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d"
##
mkdir -p dir1 dir2
cd ./dir1
pwd
#+end_src

#+RESULTS:
#+begin_results
/Users/evar/tmp/linux_workshop/dir1
#+end_results

* git
#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d"
##
command rm -r -- bkmeans

git clone https://github.com/gittar/bkmeans

cd bkmeans
ls
#+end_src

#+RESULTS:
#+begin_results
Cloning into 'bkmeans'...
.
..
.git
.gitignore
LICENSE
README.md
bkmeans
setup.py
#+end_results

#+begin_example zsh
git pull origin main
#+end_example

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
cat LICENSE
#+end_src

#+RESULTS:
#+begin_results
Copyright (c) 2021 Bernd Fritzke

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
echo "hi" > a.txt

cat a.txt
#+end_src

#+RESULTS:
#+begin_results
hi
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
git add a.txt
git commit -m 'commit 1'
#+end_src

#+RESULTS:
#+begin_results
[main 29d325f] commit 1
 1 file changed, 1 insertion(+)
 create mode 100644 a.txt
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
git branch branch_1 'HEAD~1'
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
git diff branch_1 HEAD
#+end_src

#+RESULTS:
#+begin_results
diff --git a/a.txt b/a.txt
new file mode 100644
index 0000000..45b983b
--- /dev/null
+++ b/a.txt
@@ -0,0 +1 @@
+hi
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
git checkout branch_1
#+end_src

#+RESULTS:
#+begin_results
Switched to branch 'branch_1'
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
echo 'iced tea' > a.txt
git add a.txt
git commit -m 'commit_2'
#+end_src

#+RESULTS:
#+begin_results
[branch_1 c28c4f9] commit_2
 1 file changed, 1 insertion(+)
 create mode 100644 a.txt
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
git branch branch_m 'HEAD'
git checkout branch_m
#+end_src

#+RESULTS:
#+begin_results
Switched to branch 'branch_m'
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
git branch | perl -pe 's/^\*/->/g' #: ignore perl for now
#+end_src

#+RESULTS:
#+begin_results
  branch_1
-> branch_m
  main
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
git merge main
#+end_src

#+RESULTS:
#+begin_results
CONFLICT (add/add): Merge conflict in a.txt
Auto-merging a.txt
Automatic merge failed; fix conflicts and then commit the result.
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
git ls-files --unmerged
#+end_src

#+RESULTS:
#+begin_results
100644 caecb05b91711006b07b10ddab77d65f2e2147be 2	a.txt
100644 45b983be36b73c0788dc9cbcb76cbb80fc7bb057 3	a.txt
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
cat a.txt
#+end_src

#+RESULTS:
#+begin_results
<<<<<<< HEAD
iced tea
=======
hi
>>>>>>> main
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
echo 'Hi, iced tea!' > a.txt #: 'manually' resolving the conflict above
git add a.txt
git commit -m 'conflict resolved'
#+end_src

#+RESULTS:
#+begin_results
[branch_m 89fa3b6] conflict resolved
#+end_results

#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
git ls-files --unmerged
#+end_src

#+RESULTS:
#+begin_results
#+end_results

#+begin_example zsh
git push origin branch_m
#+end_example


** @interactive
*** =git rebase -i 'HEAD~4'=
Switch to the main branch first, as the last commit resolves a conflict which will not go over well in the rebase.

*** =git add --interactive=
**** =git add --patch=

* =fd=
#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
fd --type=file '.py'
#+end_src

#+RESULTS:
#+begin_results
bkmeans/__init__.py
bkmeans/bkmeans.py
setup.py
#+end_results

* =parallel=
#+begin_src bsh.dash :results verbatim :exports both :wrap results
cd "$d/bkmeans"
##
fd --type=file '.py' | parallel -m -n1 echo File '{}' found.
#+end_src

#+RESULTS:
#+begin_results
File bkmeans/__init__.py found.
File bkmeans/bkmeans.py found.
File setup.py found.
#+end_results

* [[nightNotes:private/archive/ebooks/perl/perl one-liners.org][perl one-liners]]
